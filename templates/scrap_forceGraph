#######################################################
# FROM ROUTES.PY
#######################################################

forceGraphList = book.similar_books

        #This is how to append a key and value to each!
    for item in forceGraphList:
        item.update( {"group":"2"})

    forceGraphList = {"nodes": forceGraphList }

   # links = { "links": [
    #{"source": "Napoleon", "target": "Myriel", "value": 1},
    #{"source": "Mlle.Baptistine", "target": "Myriel", "value": 8}
    #  ]}

    links = { "links": [
    {"source": "Napoleon", "target": "Myriel", "value": 1},
    {"source": "Mlle.Baptistine", "target": "Myriel", "value": 8}
      ]}

    #print (links)
    #print (forceGraphList)

    z = {**forceGraphList, **links}

    #print(z)

    #https://stackoverflow.com/questions/35864007/python-3-5-iterate-through-a-list-of-dictionaries
    # Iterating (works):

    #for dict_item in book.similar_books:
    #    for key in dict_item:
    #        print (dict_item[key])

    # Both work
    # print (book.similar_books[0]['title'])
    # print (book.similar_books[1].get("title", "none"))

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\FROM INDEX.HTML
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

         <script>
            
            var svg = d3.select("svg"),
                width = +svg.attr("width"),
                height = +svg.attr("height");
            
            // schemeCategory20b is a pre-made color scale (https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9)
            var color = d3.scaleOrdinal(d3.schemeCategory20b);
            
            // This is a variable jef
            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function(d) { return d.id; }))
                .force("charge", d3.forceManyBody())
                .force("center", d3.forceCenter(width / 2, height / 2));
            
            d3.json("static/data/miserables.json", function(error, graph) {
              if (error) throw error;
              
              console.log()

              var link = svg.append("g")
                  .attr("class", "links")
                .selectAll("line")
                .data(graph.links)
                .enter().append("line")
                  .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
            
              var node = svg.append("g")
                  .attr("class", "nodes")
                .selectAll("g")
                .data(graph.nodes)
                .enter().append("g")
                
              var circles = node.append("circle")
                  .attr("r", 5)
                  .attr("fill", function(d) { return color(d.group); })
                  .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      .on("end", dragended));
            
              var lables = node.append("text")
                  .text(function(d) {
                    return d.id + " text"; 
                  })
                  .attr('x', 6)
                  .attr('y', 3);
            
            // This is what appears when you hover over node
              node.append("title")
                  .text(function(d) { return d.id + "title";} );
            
              simulation
                  .nodes(graph.nodes)
                  .on("tick", ticked);
            
              simulation.force("link")
                  .links(graph.links);
            
              function ticked() {
                link
                    .attr("x1", function(d) { console.log(d.source.x); return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });
            
                node
                    .attr("transform", function(d) {
                      return "translate(" + d.x + "," + d.y + ")";
                    })
              }
            });
            
            function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            }
            
            function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
            }
            
            function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            }
            
            </script>